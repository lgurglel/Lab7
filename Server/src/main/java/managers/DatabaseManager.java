package managers;

import java.io.Console;
import java.sql.*;
import java.util.Scanner;

public class DatabaseManager {
    public static final String TICKET_TABLE = "tickets";
    public static final String USER_TABLE = "users";

    public static final String TICKET_TABLE_ID_COLUMN = "id";
    public static final String TICKET_TABLE_NAME_COLUMN = "name";
    public static final String TICKET_TABLE_X_COORD_COLUMN = "x_coord";
    public static final String TICKET_TABLE_Y_COORD_COLUMN = "y_coord";
    public static final String TICKET_TABLE_CREATION_DATE_COLUMN = "creationdate";
    public static final String TICKET_TABLE_PRICE_COLUMN = "price";
    public static final String TICKET_TABLE_DISCOUNT_COLUMN = "discount";
    public static final String TICKET_TABLE_COMMENT_COLUMN = "comment";
    public static final String TICKET_TABLE_TICKET_TYPE_COLUMN = "tickettype";
    public static final String TICKET_TABLE_VENUE_NAME_COLUMN = "venuename";
    public static final String TICKET_TABLE_VENUE_CAPACITY_COLUMN = "capacity";
    public static final String TICKET_TABLE_VENUE_ADDRESS_STREET_COLUMN = "street";
    public static final String TICKET_TABLE_VENUE_ADDRESS_ZIPCODE_COLUMN = "zipCode";
    public static final String TICKET_TABLE_USER_ID_COLUMN = "ownerid";

    public static final String USER_TABLE_ID_COLUMN = "ownerid";
    public static final String USER_TABLE_USERNAME_COLUMN = "username";
    public static final String USER_TABLE_PASSWORD_COLUMN = "password";
    public static final String USER_TABLE_ONLINE_COLUMN = "online";


    private final String JDBC_DRIVER = "org.postgresql.Driver";

    private final String url = "jdbc:postgresql://localhost:7777/studs";
    private String user = "*******";
    private String password = "****";
    private Connection connection;

    public DatabaseManager() {
        try {
            doConnectionToDatabase();
        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }
    }

    private void doConnectionToDatabase() throws SQLException {
        System.out.println("Подключение к базе данных...");
        try {
            if (connection !=null && !connection.isClosed())
                connection.close();
            connection = null;
            Class.forName(JDBC_DRIVER);
            connection = DriverManager.getConnection(url, user, password);
            System.out.println("Соединение с базой данных установлено!");
        } catch (ClassNotFoundException e) {
            System.out.println("Драйвер управления базой данных не найден!");
            System.exit(0);
        }
    }

    public PreparedStatement doPreparedStatement(String sqlStatement, boolean generateKeys) throws SQLException {
        PreparedStatement preparedStatement;
        try {
            if (connection == null) doConnectionToDatabase();
            int autoGeneratedKeys = generateKeys ? Statement.RETURN_GENERATED_KEYS : Statement.NO_GENERATED_KEYS;
            preparedStatement = connection.prepareStatement(sqlStatement, autoGeneratedKeys);
            return preparedStatement;
        } catch (SQLException e) {
            if (connection == null) {
                System.out.println("Соединение с базой данных не установлено!");
            }
            throw new SQLException();
        }
    }

    public void closePreparedStatement(PreparedStatement preparedStatement) {
        if (preparedStatement == null) return;
        try {
            preparedStatement.close();
        } catch (SQLException e) {
            System.out.println("Не удалось закрыть SQL-запрос");
        }
    }

    public void closeConnection() {
        if (connection == null) return;
        try {
            connection.close();
            System.out.println("Соединение с базой данных разорвано!");
            connection = null;
        } catch (SQLException e) {
            System.out.println("Произошла ошибка при разрыве соединения с базой данных!");
        }
    }

    public void setCommit() {
        try {
            if (connection == null) doConnectionToDatabase();
            connection.setAutoCommit(false);
        } catch (SQLException e) {
            System.out.println("Произошла ошибка при установлении 'commit'!");
        }
    }

    public void setAutoCommit() {
        try {
            if (connection == null) doConnectionToDatabase();
            connection.setAutoCommit(true);
        } catch (SQLException e) {
            System.out.println("Произошла ошибка при установлении 'auto_commit'!");
        }
    }

    public void commit() {
        try {
            if (connection == null) doConnectionToDatabase();
            connection.commit();
        } catch (SQLException e) {
            System.out.println("Произошла ошибка при подтверждении нового состояния базы данных!");
        }
    }

    public void rollback() {
        try {
            if (connection == null) doConnectionToDatabase();
            connection.rollback();
        } catch (SQLException e) {
            System.out.println("Произошла ошибка при возврате исходного состояния базы данных!");
        }
    }

    public void setSavepoint() {
        try {
            if (connection == null) doConnectionToDatabase();
            connection.setSavepoint();
        } catch (SQLException e) {
            System.out.println("Произошла ошибка при сохранении состояния базы данных!");
        }
    }
}
